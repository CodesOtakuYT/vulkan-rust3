#![allow(dead_code, unused)]
use image::{ImageBuffer, Rgba};
use show_image::{create_window, ImageInfo, ImageView};
use std::env;
use std::process::Command;
use vulkano::buffer::{BufferUsage, CpuAccessibleBuffer};
use vulkano::command_buffer::{
    AutoCommandBufferBuilder, ClearColorImageInfo, CommandBufferUsage, CopyImageToBufferInfo,
};
use vulkano::device::physical::PhysicalDevice;
use vulkano::device::{Device, DeviceCreateInfo, QueueCreateInfo};
use vulkano::format::{ClearColorValue, Format};
use vulkano::image::{ImageDimensions, StorageImage};
use vulkano::instance::{Instance, InstanceCreateInfo};
use vulkano::sync::{self, GpuFuture};

#[show_image::main]
fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Create application's entry to Vulkan API
    let instance = Instance::new(InstanceCreateInfo::default()).unwrap();

    // List all the physical devices that supports Vulkan
    let physical_device = PhysicalDevice::enumerate(&instance).next().unwrap();

    // Find and select the first queue family (threads group) that supports graphics and compute
    let queue_family = physical_device
        .queue_families()
        .find(|&queue_family| queue_family.supports_compute())
        .unwrap();

    // Create vulkan context from the physical device using the selected queue family.
    let (device, mut queues) = Device::new(
        physical_device,
        DeviceCreateInfo {
            queue_create_infos: vec![QueueCreateInfo::family(queue_family)],
            ..Default::default()
        },
    )
    .unwrap();

    // Selecting the first queue from the selected queue family
    let queue = queues.next().unwrap();
    let mut args = env::args().skip(1);

    let resolution = args.next().unwrap().parse().unwrap();
    let color = [
        args.next().unwrap().parse().unwrap(),
        args.next().unwrap().parse().unwrap(),
        args.next().unwrap().parse().unwrap(),
        args.next().unwrap().parse().unwrap(),
    ];
    let format = Format::R8G8B8A8_UNORM;

    let image = StorageImage::new(
        device.clone(),
        ImageDimensions::Dim2d {
            width: resolution,
            height: resolution,
            array_layers: 1, // images can be arrays of layers
        },
        format,
        Some(queue.family()),
    )
    .unwrap();

    let buf = CpuAccessibleBuffer::from_iter(
        device.clone(),
        BufferUsage::all(),
        false,
        (0..resolution * resolution * format.components().len() as u32).map(|_| 0u8),
    )
    .unwrap();

    let mut builder = AutoCommandBufferBuilder::primary(
        device.clone(),
        queue.family(),
        CommandBufferUsage::OneTimeSubmit,
    )
    .unwrap();

    let mut clear_color_image_info = ClearColorImageInfo::image(image.clone());
    clear_color_image_info.clear_value = ClearColorValue::Float(color);

    builder
        .clear_color_image(clear_color_image_info)
        .unwrap()
        .copy_image_to_buffer(CopyImageToBufferInfo::image_buffer(
            image.clone(),
            buf.clone(),
        )) // new
        .unwrap();

    let command_buffer = builder.build().unwrap();

    let future = sync::now(device.clone())
        .then_execute(queue.clone(), command_buffer)
        .unwrap()
        .then_signal_fence_and_flush()
        .unwrap();

    println!("GPU started...");
    let start = std::time::Instant::now();
    future.wait(None).unwrap();
    let finish = std::time::Instant::now();
    let gpu_time = finish - start;
    println!("GPU finished after {:?}", gpu_time);

    let buffer_content = buf.read().unwrap();
    let image =
        ImageBuffer::<Rgba<u8>, _>::from_raw(resolution, resolution, &buffer_content[..]).unwrap();

    // Create a window with default options and display the image.
    let window = create_window("image", Default::default())?;
    window.set_image("image-001", image)?;
    window.wait_until_destroyed();

    //println!("Saving image...");
    //image.save("image.png").unwrap();
    println!("Everything succeeded!");
    Ok(())
}
